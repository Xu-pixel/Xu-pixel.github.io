<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://e.coding.net/nobi-pixel/pixel_pages/pixel-blog.git</id>
    <title>清苦食铺</title>
    <updated>2020-12-28T09:40:38.166Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://e.coding.net/nobi-pixel/pixel_pages/pixel-blog.git"/>
    <link rel="self" href="https://e.coding.net/nobi-pixel/pixel_pages/pixel-blog.git/atom.xml"/>
    <subtitle>好好学习</subtitle>
    <logo>https://e.coding.net/nobi-pixel/pixel_pages/pixel-blog.git/images/avatar.png</logo>
    <icon>https://e.coding.net/nobi-pixel/pixel_pages/pixel-blog.git/favicon.ico</icon>
    <rights>All rights reserved 2020, 清苦食铺</rights>
    <entry>
        <title type="html"><![CDATA[IO和网络的学习]]></title>
        <id>https://e.coding.net/nobi-pixel/pixel_pages/pixel-blog.git/post/io-he-wang-luo-de-xue-xi/</id>
        <link href="https://e.coding.net/nobi-pixel/pixel_pages/pixel-blog.git/post/io-he-wang-luo-de-xue-xi/">
        </link>
        <updated>2020-07-23T08:59:36.000Z</updated>
        <content type="html"><![CDATA[<h4 id="1写在前面">1.写在前面</h4>
<p>​		今天的练习是文件传输。网络编程涉及到不少IO的知识（因为都是和输入输出流密不可分嘛），所以等于学习网络部分的时候IO部分一起复习（预习）。首先准备两个类和一张图片，一个类为客户端另一个为服务器端。任务是把客户端的图片上传到服务器端。代码都是跟着狂神老师敲的，一模一样。但是我有好好理解哦。</p>
<h4 id="2准备socket">2.准备Socket</h4>
<p>​		客户端是简单的Socket类，服务端是先用Serversocket监听请求，再将请求连接到Socket。</p>
<pre><code class="language-java">//主函数不要忘记抛出异常

//客户端建立套接字
//套接字要输入目标IP和端口号，127.0.0.1即为本机地址，9000是等下服务器端打开的
Socket socket = new Socket(InetAddress.getByName(&quot;127.0.0.1&quot;), 9000);

//服务器端建立套接字
//建立服务端套接字,打开端口；
ServerSocket serverSocket = new ServerSocket(9000);
</code></pre>
<h4 id="3文件传输以及接收">3.文件传输以及接收</h4>
<p>​		接下来就是枯燥的输入输出流套来套去了。懒得一片一片截了，我就直接全部代码了。</p>
<p>下图是我对输入输出的理解了，示意图片从客户端到服务端：</p>
<figure data-type="image" tabindex="1"><img src="https://e.coding.net/nobi-pixel/pixel_pages/pixel-blog.git/post-images/1595495044652.PNG" alt="" loading="lazy"></figure>
<pre><code class="language-java">package Week3Day1.Demo02.Learn02;

import java.io.*;
import java.net.InetAddress;
import java.net.Socket;

public class MyClient02 {
    public static void main(String[] args) throws Exception{
        //建立套接字
        Socket socket = new Socket(InetAddress.getByName(&quot;127.0.0.1&quot;), 9000);

        //创建一个接在Socket上的输出流
        OutputStream outputStream = socket.getOutputStream();

        //读取文件
        FileInputStream fileInputStream = new FileInputStream(new File(&quot;src\\Stardust.png&quot;));

        //向输出流写入文件
        byte[] buffer = new byte[1024];
        int len;
        while ((len=fileInputStream.read(buffer))!=-1){
            outputStream.write(buffer,0,len);
        }

        //通知服务器已经传输完毕
        socket.shutdownOutput();

        //接收服务器传来的传输成功信息
        InputStream infoFromServer = socket.getInputStream();

        //建立一个用于接收输出流的管道
        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        //从输入流流向baos管道
        byte[] buffer2 = new byte[1024];
        len = 0;
        while ((len = infoFromServer.read(buffer2))!=-1){
            baos.write(buffer2);
        }
        System.out.println(baos.toString());

        //关闭用于接收回信的资源
        baos.close();
        infoFromServer.close();

        //关闭资源
        fileInputStream.close();
        outputStream.close();
        socket.close();
    }
}
</code></pre>
<pre><code class="language-java">package Week3Day1.Demo02.Learn02;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;

public class MyServer02 {
    public static void main(String[] args) throws Exception{
        //建立服务端套接字,打开端口；
        ServerSocket serverSocket = new ServerSocket(9000);

        //监听
        Socket socket = serverSocket.accept();

        //连接上输出流
        InputStream inputStream = socket.getInputStream();

        //读取数据
        //1.先准备一个接收的文件
        FileOutputStream fileOutputStream= new FileOutputStream(new File(&quot;receive.png&quot;));
        //2.开始接收
        byte[] buffer = new byte[1024];
        int len;
        while ((len = inputStream.read(buffer))!=-1){
            //写道输出流里去
            fileOutputStream.write(buffer,0,len);
        }

        //告诉客户端接收完毕了
        OutputStream serverOut = socket.getOutputStream();
        serverOut.write(&quot;服务器成功接收了图片&quot;.getBytes());

        //关闭资源
        fileOutputStream.close();
        inputStream.close();
        socket.close();
        serverSocket.close();
    }
}
</code></pre>
<h4 id="4通知服务器客户端已传输完毕">4.通知服务器客户端已传输完毕</h4>
<p>​		因为服务器端是还有信息要发的（告诉客户端收到了），如果客户端不告诉服务器端我已经不要发东西了，客户端会一直等。</p>
<pre><code class="language-java">//通知服务器已经传输完毕
socket.shutdownOutput();
</code></pre>
<h4 id="5关于io的部分">5.关于IO的部分</h4>
<p>​		我是只懂得从输入流到输出流之间得套路代码：</p>
<pre><code class="language-java">byte[] buffer = new byte[1024];//1024的缓存
int len;
while ((len=fileInputStream.read(buffer))!=-1){//read方法会返回一个数字，这个数字表示读取了多少个字节，如果输出流已经读取完了，就会返回1.
	outputStream.write(buffer,0,len);//把缓存写到输出流里
}
</code></pre>
<h4 id="6关闭资源">6.关闭资源</h4>
<p>​		水龙头关水，先开后关（？？？我也不懂这两句有什么关系哈哈哈）。反正关闭资源（什么流啊、套接字啊）是好习惯。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[用Java完成简单的五子棋]]></title>
        <id>https://e.coding.net/nobi-pixel/pixel_pages/pixel-blog.git/post/yong-java-wan-cheng-jian-dan-de-wu-zi-qi/</id>
        <link href="https://e.coding.net/nobi-pixel/pixel_pages/pixel-blog.git/post/yong-java-wan-cheng-jian-dan-de-wu-zi-qi/">
        </link>
        <updated>2020-07-11T01:13:49.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-java">import java.util.Scanner;
//这是游戏开始主程序
public class ChessStart {
    public static void main(String[] args) {
        //初始化棋盘
        ChessBoard chessBoard=new ChessBoard();
        chessBoard.showChess();

        //下棋
        Scanner scanner = new Scanner(System.in);
        while (scanner.hasNextInt()) {

            //获取下棋指令，例如23表示第二行第三列
            int row,column,command;
            command=scanner.nextInt();
            row=command/10-1;
            column=command%10-1;

            chessBoard.write(row,column);//向棋盘写入棋子；
            chessBoard.showChess();//显示当前棋盘；
            chessBoard.check();//检查胜利条件；
        }
        scanner.close();
    }

}
</code></pre>
<pre><code class="language-java">import static java.lang.System.exit;
//判定什么的全在里面
public class ChessBoard {
    //初始化棋盘
    private int[][] data;
    private int flag;

    ChessBoard(){
        data=new int[9][9];
        flag=0;
    }

    void showChess(){
        System.out.println(&quot;棋盘现状&quot;);
        for (int[] ints : data) {
            for (int anInt : ints) {
                if(anInt==0){
                    System.out.print(&quot;.&quot;+&quot;\t&quot;);
                }
                else if(anInt==1){
                    System.out.print(&quot;●\t&quot;);
                }
                else if(anInt==2){
                    System.out.print(&quot;○\t&quot;);
                }
            }
            System.out.println();
        }
    }

    void write(int row,int column){
        //如果是偶数次就让白子下，也就是1；
        if(flag%2==0) {
            if (0 &lt;= row &amp;&amp; row &lt; 9 &amp;&amp; 0 &lt;= column &amp;&amp; column &lt; 9) {

                if(data[row][column]==0) {//下过的位置不能再下了
                    data[row][column] = 1;
                    System.out.println(&quot;白子下完了，现在是黑子下：&quot;);
                    System.out.println();
                    flag++;
                }else{
                    System.out.println(&quot;这里已经下过了，不要再下了&quot;);
                    System.out.println();
                }

            } else {
                System.out.println(&quot;下在了错误的位置,请重试：&quot;);
                System.out.println();
            }
        }else{//否则就让黑子下
            if (0 &lt;= row &amp;&amp; row &lt; 9 &amp;&amp; 0 &lt;= column &amp;&amp; column &lt; 9) {

                if(data[row][column]==0) {
                    data[row][column] = 2;
                    System.out.println(&quot;黑子下完了，现在是白子下：&quot;);
                    System.out.println();
                    flag++;
                }else{
                    System.out.println(&quot;这里已经下过了，不要再下了&quot;);
                    System.out.println();
                }

            } else {
                System.out.println(&quot;下在了错误的位置,请重试：&quot;);
                System.out.println();
            }
        }
    }

    void check(){
        for (int i = 0; i &lt; 9; i++) {
            for (int i1 = 0; i1 &lt; 9; i1++) {
                ChessFlag chessWhiteFlag= new ChessFlag();
                ChessFlag chessBlackFlag= new ChessFlag();
                checkLeftDown(i,i1, chessWhiteFlag,chessBlackFlag);
                checkDown(i,i1, chessWhiteFlag,chessBlackFlag);
                checkRightDown(i,i1, chessWhiteFlag,chessBlackFlag);
                checkRight(i,i1, chessWhiteFlag,chessBlackFlag);
                if (chessWhiteFlag.leftDownFlag==5){
                    System.out.println(&quot;白子获胜&quot;);
                    exit(0);
                }
                if (chessWhiteFlag.downFlag==5){
                    System.out.println(&quot;白子获胜&quot;);
                    exit(0);
                }
                if (chessWhiteFlag.rightDownFlag==5){
                    System.out.println(&quot;白子获胜&quot;);
                    exit(0);
                }
                if (chessWhiteFlag.rightFlag==5){
                    System.out.println(&quot;白子获胜&quot;);
                    exit(0);
                }
                if (chessBlackFlag.leftDownFlag==5){
                    System.out.println(&quot;黑子获胜&quot;);
                    exit(0);
                }
                if (chessBlackFlag.downFlag==5){
                    System.out.println(&quot;黑子获胜&quot;);
                    exit(0);
                }
                if (chessBlackFlag.rightDownFlag==5){
                    System.out.println(&quot;黑子获胜&quot;);
                    exit(0);
                }
                if (chessBlackFlag.rightFlag==5){
                    System.out.println(&quot;黑子获胜&quot;);
                    exit(0);
                }
            }
        }
    }

    //递归检查每个子左下
    void checkLeftDown(int row,int column,ChessFlag chessFlag1,ChessFlag chessFlag2){
        //检查是否越界
        if (0 &lt;= row &amp;&amp; row &lt; 9 &amp;&amp; 0 &lt;= column &amp;&amp; column &lt; 9){

            //白子检查
            if(data[row][column]==1){
                chessFlag1.leftDownFlag++;
                checkLeftDown(row+1,column-1,chessFlag1,chessFlag2);
            }else{
                if(chessFlag1.leftDownFlag!=5)
                chessFlag1.leftDownFlag=0;
            }


            //黑子检查
            if(data[row][column]==2){
                chessFlag2.leftDownFlag++;
                checkLeftDown(row+1,column-1,chessFlag1,chessFlag2);
            }else{
                if(chessFlag2.leftDownFlag!=5)
                chessFlag2.leftDownFlag=0;
            }
        }
    }

    //递归检查每个子下
    void checkDown(int row,int column,ChessFlag chessFlag1,ChessFlag chessFlag2){
        //检查是否越界
        if (0 &lt;= row &amp;&amp; row &lt; 9 &amp;&amp; 0 &lt;= column &amp;&amp; column &lt; 9){
            if(data[row][column]==1){
                chessFlag1.downFlag++;
                checkDown(row+1,column,chessFlag1,chessFlag2);
            }else{
                if(chessFlag1.downFlag!=5)
                chessFlag1.downFlag=0;
            }


            //黑子检查
            if(data[row][column]==2){
                chessFlag2.downFlag++;
                checkDown(row+1,column,chessFlag1,chessFlag2);
            }else{
                if(chessFlag2.downFlag!=5)
                chessFlag2.downFlag=0;
            }

        }
    }

    //递归检查每个子右下
    void checkRightDown(int row,int column,ChessFlag chessFlag1,ChessFlag chessFlag2){
        //检查是否越界
        if (0 &lt;= row &amp;&amp; row &lt; 9 &amp;&amp; 0 &lt;= column &amp;&amp; column &lt; 9){
            if(data[row][column]==1){
                chessFlag1.rightDownFlag++;
                checkRightDown(row+1,column+1,chessFlag1,chessFlag2);
            }else{
                if(chessFlag1.rightDownFlag!=5)
                chessFlag1.rightDownFlag=0;
            }


            //黑子检查
            if(data[row][column]==2){
                chessFlag2.rightDownFlag++;
                checkRightDown(row+1,column+1,chessFlag1,chessFlag2);
            }else{
                if(chessFlag2.rightDownFlag!=5)
                chessFlag2.rightDownFlag=0;
            }

        }
    }

    //递归检查每个子右
    void checkRight(int row,int column,ChessFlag chessFlag1,ChessFlag chessFlag2){
        //检查是否越界
        if (0 &lt;= row &amp;&amp; row &lt; 9 &amp;&amp; 0 &lt;= column &amp;&amp; column &lt; 9){
            if(data[row][column]==1){
                chessFlag1.rightFlag++;
                checkRight(row,column+1,chessFlag1,chessFlag2);
            }else{
                if(chessFlag1.rightFlag!=5)
                chessFlag1.rightFlag=0;
            }


            //黑子检查
            if(data[row][column]==2){
                chessFlag2.rightFlag++;
                checkRight(row,column+1,chessFlag1,chessFlag2);
            }else{
                if(chessFlag2.rightFlag!=5)
                chessFlag2.rightFlag=0;
            }

        }
    }
}

</code></pre>
<pre><code class="language-java">//用于记录判断胜利条件的flag
public class ChessFlag {
    public int leftDownFlag;
    public int downFlag;
    public int rightDownFlag;
    public int rightFlag;

    ChessFlag(){
        leftDownFlag=0;
        downFlag=0;
        rightDownFlag=0;
        rightFlag=0;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java学习第一周 Day1]]></title>
        <id>https://e.coding.net/nobi-pixel/pixel_pages/pixel-blog.git/post/java-xue-xi-di-yi-zhou/</id>
        <link href="https://e.coding.net/nobi-pixel/pixel_pages/pixel-blog.git/post/java-xue-xi-di-yi-zhou/">
        </link>
        <updated>2020-07-06T01:58:53.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>记录一下学到的，懂了就不记辽~</p>
</blockquote>
<h2 id="1数组的声明和初始化">1.数组的声明和初始化</h2>
<pre><code class="language-java">//动态初始化
int[] intArray = new int[number];
//或者
int intArray[] = new int[number];

//静态初始化
int[] intArray = {1,2,3,4};
//或者
int intArray[] = {1,2,3,4};
</code></pre>
<h2 id="2控制台输入">2.控制台输入</h2>
<p>Java 可以使用 <code>java.util</code> 包下的<code>Scanner</code> 类来获取用户的输入。使用 <code>import java.util.Scanner;</code> 即可导入 Scanner。</p>
<pre><code class="language-java">//从键盘输入三个整数，分别计算它们的累加值与平均数；
import java.util.Scanner;

public class week1_4 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);//实例化Scanner类；
        int num[] = new int[3];
        int sum=0;
        for (int i = 0; i &lt; 3; i++) {
            num[i] = scanner.nextInt();//使用nextInt方法读取控制台中的整数；
            sum+=num[i];
        }
        System.out.println(&quot;累加值为&quot;+sum);
        System.out.println(&quot;平均值为&quot;+sum/3);
        scanner.close();//关闭资源；
    }
}
</code></pre>
<p><strong>Scanner</strong>类常用方法：</p>
<p><code>bool hasNextInt()</code> 判断下一个输入是不是整数，若是则返回true；其它类型的以此类推。</p>
<p><code>int nextInt()</code>读取下一个整数输入；其他类型的以此类推。</p>
<p><code>String next()</code>不能读空格；</p>
<p><code>String nextLine()</code>能读空格；</p>
<blockquote>
<pre><code class="language-java">//摘自菜鸟教程https://www.runoob.com/java/java-scanner-class.html
import java.util.Scanner;
 
public class ScannerDemo {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        // 从键盘接收数据
        int i = 0;
        float f = 0.0f;
        System.out.print(&quot;输入整数：&quot;);
        if (scan.hasNextInt()) {
            // 判断输入的是否是整数
            i = scan.nextInt();
            // 接收整数
            System.out.println(&quot;整数数据：&quot; + i);
        } else {
            // 输入错误的信息
            System.out.println(&quot;输入的不是整数！&quot;);
        }
        System.out.print(&quot;输入小数：&quot;);
        if (scan.hasNextFloat()) {
            // 判断输入的是否是小数
            f = scan.nextFloat();
            // 接收小数
            System.out.println(&quot;小数数据：&quot; + f);
        } else {
            // 输入错误的信息
            System.out.println(&quot;输入的不是小数！&quot;);
        }
        scan.close();
    }
}
</code></pre>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[离散数学_图论复习笔记]]></title>
        <id>https://e.coding.net/nobi-pixel/pixel_pages/pixel-blog.git/post/chi-san-shu-xue-_-tu-lun-fu-xi-bi-ji/</id>
        <link href="https://e.coding.net/nobi-pixel/pixel_pages/pixel-blog.git/post/chi-san-shu-xue-_-tu-lun-fu-xi-bi-ji/">
        </link>
        <updated>2020-07-03T01:29:14.000Z</updated>
        <content type="html"><![CDATA[<h1 id="5图的基本概念">5.图的基本概念</h1>
<h3 id="1无向图">1）无向图</h3>
<ol>
<li>
<p>度数为奇数的结点个数为偶数。</p>
</li>
<li>
<p>握手定理：度数等于边数的两倍。</p>
</li>
</ol>
<h3 id="2割集">2）割集</h3>
<p><strong>条件</strong>：连通图G中，</p>
<ul>
<li>移去该集合中的所有支路，图G的连通分支数变为2。</li>
<li>移去该集中的支路时，只保留一个，图G仍然连通。</li>
</ul>
<p>总之这个集合恰好切开图G，也不要多切。</p>
<h1 id="6特殊的图">6.特殊的图</h1>
<h3 id="1二部图">1）二部图</h3>
<p>每一条回路都是由偶数条边组成.就是把点分两边放，只和另一边的点连，不和自己家的连。</p>
<figure data-type="image" tabindex="1"><img src="https://e.coding.net/nobi-pixel/pixel_pages/pixel-blog.git/post-images/1593766145440.png" alt="" loading="lazy"></figure>
<h3 id="2欧拉图">2）欧拉图</h3>
<p><strong>半欧拉图</strong>（欧拉通路——走完所有边，不重复，不用回到原点）：当且仅当G是连通的，且仅有零个或者两个奇度结点。</p>
<p><strong>欧拉图</strong>（欧拉回路——走完所有边，不重复，回到原点）：当且仅当G是连通的，所有结点的度数均为偶数。</p>
<p>有向图中，欧拉回路的各点出度等于入度（不然进去了就出不来了），欧拉通路可以有两个结点例外（起点和终点），一个结点出度比入度大1，另一个相反。</p>
<h3 id="3哈密顿图">3）哈密顿图</h3>
<p><strong>哈密顿图</strong>（走完所有点，不重复，回到原点）</p>
<ul>
<li>
<p>必要条件:</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">V_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span></span></span></span>的任意非空子集</p>
</li>
</ul>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo>(</mo><mi>G</mi><mo>−</mo><msub><mi>V</mi><mn>1</mn></msub><mo>)</mo><mo>⩽</mo><mi mathvariant="normal">∣</mi><msub><mi>V</mi><mn>1</mn></msub><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">p(G-V_1)\leqslant|V_1|
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span></span></span></span></span></p>
<ul>
<li>充分条件：</li>
</ul>
<p>对任意两个不相邻结点u，v，均有</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>g</mi><mo>(</mo><mi>u</mi><mo>)</mo><mo>+</mo><mi>d</mi><mi>e</mi><mi>g</mi><mo>(</mo><mi>v</mi><mo>)</mo><mo>⩾</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">deg(u)+deg(v)\geqslant n
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩾</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span></span></p>
<p><strong>哈密顿通路</strong>（半哈密顿图——走完所有点，不重复）</p>
<ul>
<li>
<p>必要条件:</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">V_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span></span></span></span>的任意非空子集</p>
</li>
</ul>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo>(</mo><mi>G</mi><mo>−</mo><msub><mi>V</mi><mn>1</mn></msub><mo>)</mo><mo>⩽</mo><mi mathvariant="normal">∣</mi><msub><mi>V</mi><mn>1</mn></msub><mi mathvariant="normal">∣</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">p(G-V_1)\leqslant|V_1|-1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p>
<ul>
<li>充分条件：</li>
</ul>
<p>对任意两个不相邻结点u，v，均有</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>g</mi><mo>(</mo><mi>u</mi><mo>)</mo><mo>+</mo><mi>d</mi><mi>e</mi><mi>g</mi><mo>(</mo><mi>v</mi><mo>)</mo><mo>⩾</mo><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">deg(u)+deg(v)\geqslant n+1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩾</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p>
<h3 id="4-平面图">4)  平面图</h3>
<p><strong>极大平面图</strong></p>
<p>n(n≥3）阶简单平面图是极大平面图当且仅当他连通且每个面的次数为3。如果为4及以上的话，说明还能画一条对角线，那就不是极大了。</p>
<p><strong>对偶图</strong></p>
<p>面变成点，点变成面，和原来的边交叉画一条边。</p>
<figure data-type="image" tabindex="2"><img src="https://e.coding.net/nobi-pixel/pixel_pages/pixel-blog.git/post-images/1593766409793.png" alt="" loading="lazy"></figure>
<p><strong>欧拉公式</strong></p>
<p>G是平面连通图，n个结点，m条边，r个面，则有</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mi>m</mi><mo>+</mo><mi>r</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">n-m+r=2
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span></span></p>
<p>G是简单连通平面图，若m&gt;1，则有</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>⩽</mo><mn>3</mn><mi>n</mi><mo>−</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">m\leqslant 3n-6
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span></span></span></span></span></p>
<p>推论：</p>
<p>G是简单连通平面图（n,m）,若每个面的次数至少为k（k≥3），则有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>⩽</mo><mfrac><mi>k</mi><mrow><mi>k</mi><mo>−</mo><mn>2</mn></mrow></mfrac><mo>(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">m\leqslant\frac{k}{k-2}(n-2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.283439em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span>。</p>
<p><strong>库拉托夫斯基定理</strong></p>
<p>一个图是非平面图的充要条件是它存在一个能收缩为K<sub>5</sub>或K<sub>3,3</sub>的子图。</p>
<h1 id="7树">7.树</h1>
<p><strong>最优二叉树的权</strong>：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>W</mi><mo>(</mo><mi>t</mi><mo>)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>t</mi></munderover><msub><mi>w</mi><mi>i</mi></msub><mi>l</mi><mo>(</mo><msub><mi>v</mi><mi>i</mi></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">W(t)=\sum_{i=1}^tw_il(v_i)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.05823em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7805610000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p>就是每一个结点的 深度×结点的权 的和。</p>
<figure data-type="image" tabindex="3"><img src="https://e.coding.net/nobi-pixel/pixel_pages/pixel-blog.git/post-images/1593766474123.png" alt="" loading="lazy"></figure>
<p><strong>前缀码：</strong></p>
<p>任何两个元素互不为前缀。</p>
<figure data-type="image" tabindex="4"><img src="https://e.coding.net/nobi-pixel/pixel_pages/pixel-blog.git/post-images/1593766483347.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
</feed>